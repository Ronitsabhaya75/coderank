import { promises as fs } from "fs";
import path from "path";

import simpleGit from "simple-git";
import { window, ExtensionContext } from "vscode";

import { getDate } from "../util/common";

export class Git {
    private constructor(
        private username: string,
        private token: string,
        public repo: string,
        public branch: string,
        public coderankDir: string,
        public repoDir: string,
        public remoteCoderankDir: string
    ) {}

    static async init(context: ExtensionContext, saveCredentials: boolean): Promise<Git | null> {
        const username = await window.showInputBox({
            prompt: `Enter your GitHub username.${saveCredentials ? " If desired, enable credential saving via `coderank.saveCredentials` for faster access." : ""}`,
            placeHolder: "Username",
            value: (await context.secrets.get("githubUser")) ?? "",
            ignoreFocusOut: true,
        });

        const token = await window.showInputBox({
            prompt: "Enter your GitHub PAT",
            placeHolder: "Personal access token",
            password: true,
            value: (await context.secrets.get("githubPAT")) ?? "",
            ignoreFocusOut: true,
        });

        const repo = await window.showInputBox({
            prompt: "Enter your coderank repo name",
            placeHolder: "Repository name",
            value: (await context.secrets.get("githubRepo")) ?? "",
            ignoreFocusOut: true,
        });

        const branch = await window.showInputBox({
            prompt: "Enter your desired branch name",
            placeHolder: "Branch name",
            value: (await context.secrets.get("githubBranch")) ?? "",
            ignoreFocusOut: true,
        });

        if (username && token && repo && branch) {
            const coderankDir = context.globalStorageUri.fsPath;
            const repoDir = path.join(coderankDir, repo);
            const remoteCoderankDir = path.join(repoDir, "coderank");
            return new Git(username, token, repo, branch, coderankDir, repoDir, remoteCoderankDir);
        }
        return null;
    }

    async cloneRepo(): Promise<void> {
        await fs.rm(this.repoDir, { recursive: true, force: true });

        const cloneUrl = `https://${this.username}:${this.token}@github.com/${this.username}/${this.repo}.git`;
        const git = simpleGit(this.coderankDir);
        await git.clone(cloneUrl, this.repoDir);
        await fs.mkdir(this.remoteCoderankDir, { recursive: true });
        await fs.writeFile(path.join(this.remoteCoderankDir, "README.md"), getREADMEContent());
    }

    async pushRepo(): Promise<void> {
        const git = simpleGit(this.repoDir);
        await git.add("./*");
        await git.commit(`coderank: ${getDate()}`);
        await git.push("origin", this.branch);
    }

    async saveCredentials(context: ExtensionContext): Promise<void> {
        await context.secrets.store("githubUser", this.username);
        await context.secrets.store("githubPAT", this.token);
        await context.secrets.store("githubRepo", this.repo);
        await context.secrets.store("githubBranch", this.branch);
    }

    async teardown(): Promise<void> {
        try {
            await fs.rm(this.repoDir, { recursive: true, force: true });
        } catch (err) {
            window.showWarningMessage(
                `Warning: failed to remove ${this.repoDir}. This is not critical, but may cause issues when ${this.repo} is next cloned: ${err}`
            );
        }
    }
}

export function getREADMEContent(): string {
    return `
The contents of this directory are automatically generated by the coderank extension: https://github.com/reidspreiter/coderank.git

Please do not modify the following files in this directory, as it may affect the functionality of the coderank extension:
- README.md
- totalcoderank.json
- coderank2024.json
- coderankXXXX.json

While it is not recommended, additional files may be added to this directory if needed. Only the files listed above will be modified by the extension, and all others will be preserved.
    `;
}
